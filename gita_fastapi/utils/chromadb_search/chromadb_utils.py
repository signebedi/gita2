import chromadb
from sentence_transformers import SentenceTransformer
import json


SAMPLE_DATA = [
    {
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        "chapter_number": 1,
        "verse_number": 1,
        "author_id": "author_001",
        "authorName": "John Doe",
        "full_ref": "1:1",
        "book_id": "book_001"
    },
    {
        "description": "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        "chapter_number": 1,
        "verse_number": 2,
        "author_id": "author_002",
        "authorName": "Jane Smith",
        "full_ref": "1:2",
        "book_id": "book_001"
    },
    {
        "description": "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
        "chapter_number": 2,
        "verse_number": 1,
        "author_id": "author_001",
        "authorName": "John Doe",
        "full_ref": "2:1",
        "book_id": "book_001"
    },
    {
        "description": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
        "chapter_number": 2,
        "verse_number": 2,
        "author_id": "author_003",
        "authorName": "Alice Johnson",
        "full_ref": "2:2",
        "book_id": "book_002"
    },
    {
        "description": "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
        "chapter_number": 3,
        "verse_number": 1,
        "author_id": "author_004",
        "authorName": "Bob Brown",
        "full_ref": "3:1",
        "book_id": "book_003"
    }
]

def get_client(
    client_path:str = "./chroma_data",
    collection_name:str = "text",
    rebuild:bool = False,
):
    """
    Initializes and returns a ChromaDB PersistentClient collection.

    Args:
        client_path (str): Path to the persistent storage for ChromaDB. Default is './chroma_data'.
        collection_name (str): Name of the collection to create or retrieve. Default is 'text'.
        rebuild (bool): Flag to indicate whether to rebuild the collection. Default is False.

    Returns:
        chromadb.collection.Collection: The retrieved or newly created ChromaDB collection.
    """

    # Initialize ChromaDB Persistent Client
    chroma_client = chromadb.PersistentClient(path=client_path)

    # Check if rebuild is True, delete the existing collection
    if rebuild:
        try:
            chroma_client.delete_collection(name=collection_name)
            print(f"Collection '{collection_name}' deleted successfully.")
        except Exception as e:
            print(f"Error deleting collection '{collection_name}': {e}")

    # Create or retrieve the collection
    collection = chroma_client.get_or_create_collection(name=collection_name)

    return collection

def get_embedding_model(
    model_name:str = 'all-MiniLM-L6-v2'
):
    """
    Initializes and returns a SentenceTransformer embedding model.

    Args:
        model_name (str): Name of the SentenceTransformer model to use. Default is 'all-MiniLM-L6-v2'.

    Returns:
        SentenceTransformer: The initialized embedding model.
    """

    # Initialize the embedding model
    embedding_model = SentenceTransformer(model_name)

    return embedding_model


def add_data(
    file_path: str | None = None,
    client_path: str = "./chroma_data",
    collection_name: str = "text",
    model_name: str = 'all-MiniLM-L6-v2',
    rebuild: bool = False,
):
    """
    Adds data to a ChromaDB collection using embeddings generated by a SentenceTransformer model.
    If no file path is provided, sample data will be used.

    Args:
        file_path (str | None): Path to the JSON file containing the data. If None, sample data will be used. Default is None.
        client_path (str): Path to the persistent storage for ChromaDB. Default is './chroma_data'.
        collection_name (str): Name of the collection to insert data into. Default is 'text'.
        model_name (str): Name of the SentenceTransformer model for generating embeddings. Default is 'all-MiniLM-L6-v2'.
        rebuild (bool): Flag to indicate whether to rebuild the collection. Default is False.

    Returns:
        dict: A dictionary indicating the status of the operation and any relevant metadata.
    """

    # Get the client
    collection = get_client(client_path=client_path, collection_name=collection_name, rebuild=rebuild)

    # Initialize the embedding model
    embedding_model = get_embedding_model(model_name=model_name)

    # Load data from the provided file or use sample data
    if file_path:
        with open(file_path, 'r') as file:
            data = json.load(file)
    else:
        # Sample data
        data = SAMPLE_DATA

    # Insert data into the collection
    added_count = 0
    for entry in data:
        description = entry['description']
        metadata = {
            "chapter_number": entry['chapter_number'],
            "verse_number": entry['verse_number'],
            "author_id": entry['author_id'],
            "authorName": entry['authorName'],
            "full_ref": entry['full_ref'],
            "book_id": entry['book_id']
        }
        vector = embedding_model.encode(description)  # Generate embedding for the description
        collection.add(
            documents=[description],  # Text content
            metadatas=[metadata],     # Metadata dictionary
            ids=[entry['full_ref']]   # Unique ID
        )
        added_count += 1
        print(f"\nAdded {entry['full_ref']}.\n")

    print(f"Data successfully inserted into ChromaDB! Total records added: {added_count}")

    return {"status": "success", "records_added": added_count}



def query_collection(
    query_text: str = "dolor amet",
    n_results: int = 5,
    client_path:str = "./chroma_data",
    collection_name:str = "text",
    model_name: str = 'all-MiniLM-L6-v2',
):
    """
    Queries a ChromaDB collection for similar documents based on a query text.

    Args:
        query_text (str): The text to query against the collection. Default is 'hysterical delirium'.
        n_results (int): Number of similar results to retrieve. Default is 5.
        client_path (str): Path to the persistent storage for ChromaDB. Default is './chroma_data'.
        collection_name (str): Name of the collection to insert data into. Default is 'text'.
        model_name (str): Name of the SentenceTransformer model for generating embeddings. Default is 'all-MiniLM-L6-v2'.

    Returns:
        str: A JSON string containing the query results, including document IDs, content, metadata, and distances.
    """

    # Get the client
    collection = get_client(client_path=client_path, collection_name=collection_name)

    # Initialize the embedding model
    embedding_model = get_embedding_model(model_name=model_name)

    # Return query
    query_vector = embedding_model.encode(query_text)
    results = collection.query(query_embeddings=[query_vector], n_results=n_results)

    # Extract relevant fields
    output = {
        "ids": results.get("ids", []),
        "documents": results.get("documents", []),
        "metadatas": results.get("metadatas", []),
        "distances": results.get("distances", []),
    }

    # Convert to JSON
    json_output = json.dumps(output)

    # Print or return the JSON document
    print(json_output)
    return json_output


# if __name__=="__main__":
#     query_collection()